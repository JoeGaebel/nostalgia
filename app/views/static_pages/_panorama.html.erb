<div id="photosphere"></div>
<script>
  var pinAsset = "<%= image_url("pin2.png") %>";

  function hex2rgba(hex,opacity){
    hex = hex.replace('#','');
    var r = parseInt(hex.substring(0, hex.length/3), 16);
    var g = parseInt(hex.substring(hex.length/3, 2*hex.length/3), 16);
    var b = parseInt(hex.substring(2*hex.length/3, 3*hex.length/3), 16);
    return 'rgba('+r+', '+g+', '+b+', '+opacity/100+')';
  };

  function getPortals(currentSphere){
    var currentPortals = [];

    for (var portal of currentSphere.portals) {
      currentPortals.push({
        id: 'portal'+portal.id,
        polygon_px: portal.polygon_px,
        svgStyle: {
          fill: 'url(#' + portal.fill + ')',
          stroke: ''+hex2rgba(portal.stroke, parseInt(portal.stroke_transparency)),
          'stroke-width': portal.stroke_width+'px'
        },
        tooltip: {
          content: portal.tooltip_content,
          position: portal.tooltip_position
        }
      });
    }
    return currentPortals;
  }

  function getMarkers(currentSphere){
    var currentMarkers = [];

    for (var marker of currentSphere.markers) {
      currentMarkers.push({
        id: marker.id,
        name: 'marker'+marker.id,
        image: pinAsset,
        tooltip: {
          content: marker.tooltip_content,
          position: marker.tooltip_position
        },
        content: '<img src="'+marker.content+'" style="width: 100%"/>',
        x: marker.x,
        y: marker.y,
        width: marker.width,
        height: marker.height,
      });
    }
    return currentMarkers;
  }

  const defaultPanoramaSettings = {
    loading_img: "<%= image_url('photosphere-logo.gif') %>",
    navbar: [],
    sphere_segments: 32,
    container: 'photosphere',
    anim_speed: '-2rpm',
    default_fov: 20,
    fisheye: true,
    move_speed: 1.1,
    time_anim: false,
    gyroscope: false,
    webgl: true,
    size: {
      height: 600
    },
    transition: {
      duration: 3000,
      loader: false,
      blur: true
    }
  };

  var currentSphere = window.memory.spheres[0];

  var PSV = new PhotoSphereViewer(
    $.extend({
    panorama: currentSphere.panorama,
    caption: currentSphere.caption,
    markers: getMarkers(currentSphere).concat(getPortals(currentSphere))
  }, defaultPanoramaSettings));

  PSV.on('click', function(e) {
   console.log(e.texture_x + " " + e.texture_y);
  });

  PSV.on('select-marker', function(marker) {
    if (marker.isPolygon()) {
      PSV.rotate({
        longitude: marker.longitude,
        latitude: marker.latitude - (Math.PI / 7)
      });

      var portal = _.findWhere(currentSphere.portals, { id: parseInt(marker.id.replace("portal", "")) });
      var associatedSphere = _.findWhere(window.memory.spheres, { id: portal.to_sphere_id });


      PSV.setPanorama(associatedSphere.panorama, {
        longitude: Math.PI,
        latitude: 0
      }, true).then(function(){
        PSV.clearMarkers();
        markers = getMarkers(associatedSphere).concat(getPortals(associatedSphere));
        for (marker of markers) {
          PSV.addMarker(marker);
        }
        currentSphere = associatedSphere;
      });
    }
  });

  PSV.on('ready', function() {
    $('.psv-navbar').hide();
  });
</script>

<svg id="patterns">
  <defs>
    <pattern id="dots" x="10" y="10" width="30" height="30" patternUnits="userSpaceOnUse">
      <circle cx="10" cy="10" r="10" style="stroke: none; fill: rgba(255,0,0,0.4)" />
    </pattern>
    <pattern id="points" x="10" y="10" width="15" height="15" patternUnits="userSpaceOnUse">
      <circle cx="10" cy="10" r="0.8" style="stroke: none; fill: red" />
    </pattern>
  </defs>
</svg>
