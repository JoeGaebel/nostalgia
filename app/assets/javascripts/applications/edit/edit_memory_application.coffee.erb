#= require applications/memory_application
#= require applications/edit/portal_view
#= require applications/edit/sphere_select_view

class EditMemoryApplication extends MemoryApplication
  constructor: (options = {}) ->
    super
    @portalView = new PortalView({ app: @ })
    @markerView = new MarkerView({ app: @ })
    @sphereSelectView = new SphereSelectView({ app: @ })

    @views = [@portalView, @markerView]

  bindHandlers: ->
    super
    PSV.off 'select-marker'

# Helpers

  getPSVOptions: ->
    $.extend
      panorama: window.currentSphere.panorama,
      caption: window.currentSphere.caption,
      markers: @getPortalsAndMarkers(currentSphere)
    , @defaultPanoramaSettings, @editPanoramaSettings

  _setNextSphereMakers: (sphere) ->
    super
    @portalView.updateSelect()

  freezeOtherViews: (except) ->
    viewsToFreeze = _.reject @views, (view) ->
      view instanceof except.constructor

    for view in viewsToFreeze
      view.freeze()

  unfreezeOtherViews: (except) ->
    viewsToUnfreeze = _.reject @views, (view) ->
      view instanceof except.constructor

    for view in viewsToUnfreeze
      view.resetViewState()

  resetPageState: =>
    for view in @views
      view.resetViewState()


# Promises

  onAjaxError: (jqXHR, textStatus, errorThrown) =>
    alert("Looks like that request didn't work... #{textStatus}: #{errorThrown}")


# Constants

  editPanoramaSettings:
    anim_speed: '0rpm'

  defaultMarkerDimension: <%= Marker::DEFAULT_DIM %>

window.EditMemoryApplication = EditMemoryApplication
