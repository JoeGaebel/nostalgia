#= require applications/memory_application
#= require applications/edit/portal_view
#= require applications/edit/sphere_select_view
#= require applications/edit/zoom_view

class EditMemoryApplication extends MemoryApplication
  constructor: (options = {}) ->
    super
    @portalView = new PortalView({ app: @ })
    @markerView = new MarkerView({ app: @ })
    @sphereSelectView = new SphereSelectView({ app: @ })
    @zoomView = new ZoomView({ app: @ })
    @addSphereView = new AddSphereView({ app: @ })
    @headerView = new HeaderView({ app: @ })

    @views = [@portalView, @markerView]
    @viewsToHide = [@portalView, @markerView, @zoomView]

  bindHandlers: ->
    super
    PSV.off 'select-marker'
    view.bindPSV() for view in @views

# Helpers

  handleEmptyPage: ->
    return if window.currentSphere
    $('.link-viewer').hide()
    view.hide() for view in @viewsToHide

  setUpPSV: ->
    $('.link-viewer').show()
    window.currentSphere = window.memory.spheres[0]
    @_preload(currentSphere.panorama)
    @setNextSphere(window.currentSphere)

    view.show() for view in @viewsToHide

  _preload: (url) ->
    image = new Image()
    image.src = url

  getPSVOptions: ->
    $.extend super, @editPanoramaSettings

  _setNextSphereMakers: (sphere) ->
    super
    @portalView.updateSelect()
    @zoomView.resetSliderValue()

  freezeOtherViews: (except) ->
    viewsToFreeze = _.reject @views, (view) ->
      view instanceof except.constructor

    for view in viewsToFreeze
      view.freeze()

  unfreezeOtherViews: (except) ->
    viewsToUnfreeze = _.reject @views, (view) ->
      view instanceof except.constructor

    for view in viewsToUnfreeze
      view.resetViewState()

  resetPageState: =>
    @resetCursor()

    for view in @views
      view.resetViewState()

  handleNewSphere: ->
    @setUpPSV() unless window.currentSphere?

    @sphereSelectView.renderSpheres()
    @portalView.updateSelect()

  doTransition: ->
    super(arguments...)
    @resetPageState()

  setCursorToPencil: ->
    $('.psv-hud').awesomeCursor('pencil', {
      hotspot: [3, 22]
      outline: 'white'
    })

  resetCursor: ->
    $('.psv-hud').css('cursor', 'move')

  hackThePencil: ->
    $('body').append("<i class='fa fa-pencil' style='width:0px; height:0px; overflow:hidden'>");

  promptForTransition: ->
    # To prevent loss of unsaved data

    if @markerView.isCreatingMarker
      confirm("Looks like you're creating a marker, are you sure you wish to leave? Unsaved marker content will be lost.")
    else if @portalView.isCreatingPortal
      confirm("Looks like you're creating a portal, are you sure you wish to leave? Unsaved portal settings will be lost.")
    else
      true

  onDocumentReady: =>
    @hackThePencil()
    @handleEmptyPage()


# Promises

  onAjaxError: (jqXHR, textStatus, errorThrown) =>
    alert("Error: #{jqXHR.responseJSON?.message || 'Wops! Not sure what happened there. Please visit www.spherelink.io/contact-us to let us know if this continues :('}")


# Constants

  defaultMarkerDimension: <%= Marker::DEFAULT_DIM %>

  editPanoramaSettings:
    anim_speed: '0rpm'

window.EditMemoryApplication = EditMemoryApplication
