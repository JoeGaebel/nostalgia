#= require applications/edit/spinner_view

class AddSphereView
  constructor: (options = {}) ->
    @app = options.app
    @intervals = {}
    $(document).ready(@onDocumentReady)

  onDocumentReady: =>
    @createUIHash()
    @bindHandlers()

  createUIHash: ->
    @ui =
      $addSphereButton: $('.add-button')
      $addForm: $('.add-form')

      $submit: $('#upload-submit')
      $cancel: $('#upload-cancel')
      $caption: $('.sphere-caption')
      $file: $('.sphere-file')

      $fileForm: $('.file-form')
      $captionForm: $('.caption-form')

  bindHandlers: ->
    @ui.$addSphereButton.click(@onAddSphereButtonClick)
    @ui.$cancel.click(@resetWidget)
    @ui.$submit.click(@onSubmitClick)

  resetWidget: (event) =>
    @ui.$addForm.hide()
    @ui.$addSphereButton.show()
    event?.stopPropagation()

  newSphere: ->
    formData = new FormData()
    formData.append('sphere[panorama]', @ui.$file[0].files[0])
    formData.append('sphere[caption]', @ui.$caption.val())
    formData.append('memory_id', window.memory.id)

    spinnerID = chance.guid()
    @appendSpinner(spinnerID)
    @resetWidget()

    $.ajax
      url: '/spheres',
      data: formData,
      cache: false,
      contentType: false,
      processData: false,
      type: 'POST'
      success: _.partial(@onNewSphereSuccess, spinnerID)
      error: _.partial(@onNewSphereError, spinnerID)

  pollForCompletion: (spinnerID, guid) ->
    $.ajax
      url: "/spheres/#{guid}",
      cache: false,
      contentType: false,
      processData: false,
      type: 'GET'
      success: _.partial(@onCreateSphereSuccess, spinnerID)
      error: _.partial(@onPollError, spinnerID)

  appendSpinner: (id) ->
    $addSphereLink = $('.add-sphere-link')

    html = new SpinnerView(id).render()
    $(html).insertBefore($addSphereLink)

  removeSpinner: (id) ->
    if id
      $("#spinner-#{id}").remove()
    else
      $('.spinner').remove()

  resetViewState: (id) ->
    if id
      @removeSpinner(id)
    else
      @removeSpinner()

  clearInputs: ->
    @ui.$caption.val("")
    @ui.$file.val("")

  clearLocalInterval: (spinnerID) ->
    clearInterval(@intervals[spinnerID])
    delete @intervals[spinnerID]

  onAddSphereButtonClick: (event) =>
    @ui.$addForm.show()
    @ui.$addSphereButton.hide()

    @clearInputs()

  onSubmitClick: =>
    if !@ui.$file[0].files[0]
      @ui.$fileForm.addClass('has-error')

    if !@ui.$caption.val()
      @ui.$captionForm.addClass('has-error')

    if @ui.$file[0].files[0] && @ui.$caption.val()
      @ui.$fileForm.removeClass('has-error')
      @ui.$captionForm.removeClass('has-error')
      @newSphere()

  onNewSphereSuccess: (spinnerID, response) =>
    @intervals[spinnerID] = setInterval((=> @pollForCompletion(spinnerID, response.guid)), 5000)
    SpinnerView::showProgress(spinnerID);

  onCreateSphereSuccess: (spinnerID, response) =>
    return if response.guid

    @clearLocalInterval(spinnerID)
    SpinnerView::hideProgress(spinnerID)
    window.memory.spheres.push(response)
    @resetViewState(spinnerID)
    @app.handleNewSphere()

  onNewSphereError: (spinnerID, response) =>
    @app.onAjaxError(response)
    @resetViewState(spinnerID)

  onPollError: (spinnerID, response) =>
    @clearLocalInterval(spinnerID)
    @app.onAjaxError(response)
    @resetViewState()


window.AddSphereView = AddSphereView
