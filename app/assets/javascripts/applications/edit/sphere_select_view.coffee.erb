#= require applications/edit/sphere_view

class SphereSelectView
  constructor: (options = {}) ->
    @app = options.app
    @portalView = options.portalView
    $(document).ready(@onDocumentReady)

  onDocumentReady: =>
    @renderSpheres()

  renderSpheres: ->
    for sphere in window.memory.spheres
      $addSphereLink = $('.add-sphere-link')

      if $("#sphere-#{sphere.id}").length == 0
        view = new SphereView(sphere)
        html = view.render()
        $(html).insertBefore($addSphereLink)
        $("##{sphere.id}.sphere-link").click(@onSphereLinkClick)
        $("##{sphere.id}.delete-sphere").click(@onSphereDeleteClick)

  deleteSphere: (sphereId) ->
    $.ajax
      url: "/spheres/#{sphereId}"
      type: 'DELETE'
      contentType: 'application/json'
      success: @onSphereDeleteSuccess
      error: @app.onAjaxError

  cleanSphereCache: (sphereId) ->
    cachedSphere = _.findWhere(window.memory.spheres, { id: sphereId })
    indexOfCachedSphere = window.memory.spheres.indexOf(cachedSphere)
    if indexOfCachedSphere isnt -1
      memory.spheres.splice(indexOfCachedSphere, 1)

  removeAssociatedPortals: (sphereId) ->
    portals = _.pluck(memory.spheres, 'portals')
    portals = _.flatten(portals)
    portalsToClean = _.where(portals, { to_sphere_id: sphereId })

    for portal in portalsToClean
      sphere = _.findWhere(memory.spheres, { id: portal.from_sphere_id })
      index = sphere.portals.indexOf(portal)
      sphere.portals.splice(index, 1)

      if currentSphere.id == portal.from_sphere_id
        window.PSV.removeMarker(portal.id)

  onSphereLinkClick: (e) =>
    id = parseInt(e.currentTarget.id)
    associatedSphere = _.findWhere(window.memory.spheres, { id })
    @app.setNextSphere(associatedSphere)

    @app.resetPageState()

  onSphereDeleteClick: (e) =>
    id = parseInt(e.currentTarget.id)
    response = confirm("Delete this sphere and it's associated markers and portals?")
    if response
      @deleteSphere(id)

  onSphereDeleteSuccess: (sphere) =>
    @cleanSphereCache(sphere.id)
    @removeAssociatedPortals(sphere.id)

    if currentSphere.id == sphere.id
      if memory.spheres.length
        @app.setNextSphere(memory.spheres[0])
      else
        delete window.currentSphere
        @app.handleEmptyPage()

    $(".add-sphere-view #sphere-#{sphere.id}").remove()


window.SphereSelectView = SphereSelectView
