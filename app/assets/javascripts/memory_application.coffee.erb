class MemoryApplication
  defaultPanoramaSettings:
    loading_img: "<%= image_url('photosphere-logo.gif') %>",
    navbar: [],
    sphere_segments: 32,
    container: 'photosphere',
    anim_speed: '-2rpm',
    default_fov: 20,
    fisheye: true,
    move_speed: 1.1,
    time_anim: false,
    gyroscope: false,
    webgl: true,
    size:
      height: 600
    transition:
      duration: 1500,
      loader: false,
      blur: true

  constructor: (memory, sphereNum) ->
    window.memory = memory
    window.currentSphere = memory.spheres[sphereNum]

  start: ->
    window.PSV = new PhotoSphereViewer($.extend
        panorama: window.currentSphere.panorama,
        caption: window.currentSphere.caption,
        markers: @getPortalsAndMarkers(currentSphere)
      , @defaultPanoramaSettings
    )
    @bindHandlers()

  bindHandlers: ->
    window.PSV.on 'click', (e) ->
      console.log("x, y: "+ e.texture_x + ", " + e.texture_y)
      console.log("latitude, longitude: "+e.latitude + ", " + e.longitude)

    window.PSV.on 'ready', ->
      $('.psv-navbar').hide();

    window.PSV.on 'select-marker', (marker) =>
      @doTransition(marker) if marker.isPolygon()

  doTransition: (marker) ->
    center = @getCenter(marker.polygon_px)
    window.PSV.animate({
      x: center[0],
      y: center[1]
    }, 1000).then(=> @setNextSphere(marker))

  setNextSphere: (marker) ->
    portal = _.findWhere(window.currentSphere.portals, { id: marker.id })
    associatedSphere = _.findWhere(window.memory.spheres, { id: portal.to_sphere_id })

    window.PSV.setPanorama(associatedSphere.panorama, {
      latitude: portal.fov_lat,
      longitude: portal.fov_lng
    }, true).then(=> @_setNextSphereMakers(associatedSphere))

  _setNextSphereMakers: (sphere) ->
    PSV.zoom(sphere.defaultZoom)
    PSV.clearMarkers();
    markers = @getPortalsAndMarkers(sphere);
    PSV.addMarker(marker) for marker in markers
    window.currentSphere = sphere;

  getPortalsAndMarkers: (sphere) ->
    sphere.markers.concat sphere.portals

  getCenter: (array) ->
    x = array.map (a) -> a[0]
    y = array.map (a) -> a[1]
    minX = Math.min.apply(null, x)
    maxX = Math.max.apply(null, x)
    minY = Math.min.apply(null, y)
    maxY = Math.max.apply(null, y)
    [(minX + maxX)/2, (minY + maxY)/2]

window.MemoryApplication = MemoryApplication
