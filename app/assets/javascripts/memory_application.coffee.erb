class MemoryApplication
  pinUrl: "<%= image_url('pin2.png') %>"

  defaultPanoramaSettings:
    loading_img: "<%= image_url('photosphere-logo.gif') %>",
    navbar: [
      title: 'Fullscreen',
      content: '<%= image_tag("fullscreen.png", style: "width: 25px; height: 25px;") %>',
      onClick: => window.PSV.toggleFullscreen(),
      'caption'
    ],
    sphere_segments: 128,
    container: 'photosphere',
    anim_speed: '-0.5rpm',
    time_anim: 0,
    default_fov: 20,
    move_speed: 1.8,
    fisheye: false,
    gyroscope: false,
    webgl: true,
    cache_texture: 10,
    size:
      height: $('.photosphere').height()
      width: $('.photosphere').width()
    transition:
      duration: 0,
      loader: true,
      blur: true

  defaultSoundManagerSettings:
    preferFlash: false,
    debugMode: false,
    debugFlash: false,
    useHTML5Audio: true,
    stream: true,
    flashVersion: 8
    url: "<%= asset_path("soundmanager2/swf/soundmanager2.swf") %>"

  defaultSoundSettings:
    autoLoad: true,
    autoPlay: false

  editPanoramaSettings:
    anim_speed: '0rpm'

  createdPortalCount: 0

  constructor: (options = {}) ->
    window.memory = options.memory
    window.currentSphere = memory.spheres[options.sphereNum]
    window.hideNavBar = true
    @editMode = options.editMode

  start: ->
    soundManager.setup(@defaultSoundManagerSettings);
    soundManager.onready(@soundManagerReady)

    PSVOptions = $.extend
      panorama: window.currentSphere.panorama,
      caption: window.currentSphere.caption,
      markers: @getPortalsAndMarkers(currentSphere)
    , @defaultPanoramaSettings

    PSVOptions = $.extend(PSVOptions, @editPanoramaSettings) if @editMode

    window.PSV = new PhotoSphereViewer(PSVOptions)

    @bindHandlers()
    @bindEditHandlers() if @editMode

  bindHandlers: ->
    window.PSV.on 'ready', ->
      PSV.setCaption(currentSphere.caption)
      PSV.hideNavbar() if window.hideNavBar
      setTimeout((-> PSV.zoom(currentSphere.defaultZoom)), 1)

    window.PSV.on 'select-marker', (marker) =>
      @doTransition(marker) if marker.isPolygon()

    window.PSV.on 'fullscreen-updated', (enabled) ->
      PSV.toggleNavbar()

    PSV.on 'click', @onPSVClick

  bindEditHandlers: ->
    $(document).ready =>
      @ui = {}
      @ui.$sphereLink = $('.sphere-link')
      @ui.$startPortal = $('#start-portal')
      @ui.$resetPortal = $('#reset-portal')
      @ui.$savePortal = $('#save-portal')
      @ui.$toSphereSelect = $('#to_sphere_id')

      @ui.$toSphereSelect.change(@toSphereSelectChanged)
      @ui.$startPortal.click(@startPortalClicked)
      @ui.$resetPortal.click(@resetClicked)
      @ui.$sphereLink.click(@sphereLinkClicked)
      @ui.$savePortal.click(@savePortalClicked)

  doTransition: (marker) ->
    center = @getCenter(marker.polygon_px)

    portal = _.findWhere(window.currentSphere.portals, { id: marker.id })
    associatedSphere = _.findWhere(window.memory.spheres, { id: portal.to_sphere_id })

    window.PSV.animate({
      x: center[0],
      y: center[1]
    }, 1000).then(=> @setNextSphere(associatedSphere, portal))

  setNextSphere: (sphere, portal = {}) ->
    window.PSV.setPanorama(sphere.panorama, {
      latitude: portal.fov_lat || 0,
      longitude: portal.fov_lng || 0
    }, true).then(=> @_setNextSphereMakers(sphere))

  _setNextSphereMakers: (sphere) ->
    PSV.setCaption(sphere.caption)
    PSV.zoom(sphere.defaultZoom)
    PSV.clearMarkers();
    markers = @getPortalsAndMarkers(sphere);
    PSV.addMarker(marker) for marker in markers
    @playSound(sphere)
    window.currentSphere = sphere;

  getPortalsAndMarkers: (sphere) ->
    sphere.markers.concat sphere.portals

  playSound: (sphere) ->
    if sphere.sound
      soundManager.mute(memory.defaultSound.id) if memory.defaultSound
      if soundManager.getSoundById(sphere.sound.id)
        soundManager.play(sphere.sound.id).unmute()
      else
        @createSound(sphere.sound).play()

    else
      soundManager.pauseAll();
      soundManager.play(memory.defaultSound.id).unmute() if memory.defaultSound

  getCenter: (array) ->
    imageWidth = PSV.prop.pano_data.full_width
    x = array.map (a) -> a[0]
    y = array.map (a) -> a[1]
    minX = Math.min.apply(null, x)
    maxX = Math.max.apply(null, x)
    minY = Math.min.apply(null, y)
    maxY = Math.max.apply(null, y)

    centerY = (minY + maxY)/2

    insideCenterX = (minX + maxX)/2
    insideAvgX = insideCenterX - minX

    outsideAvgX = (imageWidth - maxX + minX) / 2
    outsideOffset = maxX
    outsideCenterX = (outsideAvgX + outsideOffset) % imageWidth

    if insideAvgX > outsideAvgX
      [outsideCenterX, centerY]
    else
      [insideCenterX, centerY]

  createSound: (soundConfig) ->
    soundManager.createSound(_.extend({}, @defaultSoundSettings, soundConfig))

  getPortalParams: (portal) ->
    params =
      id: window.currentSphere.id
      portal:
        polygon_px: portal.polygon_px
        to_sphere_id: portal.to_sphere_id

    JSON.stringify(params)

# Event Handlers


  soundManagerReady: =>
    if memory.defaultSound
      @createSound(memory.defaultSound).play()

  resetClicked: =>
    @ui.$startPortal.prop('disabled', false)
    @ui.$savePortal.prop('disabled', true)
    @isCreatingPortal = false
    PSV.removeMarker('new-portal', true)

  sphereLinkClicked: (e) =>
    id = parseInt(e.currentTarget.id)
    associatedSphere = _.findWhere(window.memory.spheres, { id })
    @setNextSphere(associatedSphere)

  startPortalClicked: =>
    @ui.$startPortal.prop('disabled', true)
    @ui.$resetPortal.prop('disabled', false)
    @isCreatingPortal = true

    PSV.addMarker
      id: 'new-portal',
      polygon_px: [[]]
      to_sphere_id: @ui.$toSphereSelect.val()
      svgStyle:
        fill: "url(#points)"
        stroke: "rgba(255, 50, 50, 0.8)"
        'stroke-width': "2px"

  toSphereSelectChanged: =>
    if @isCreatingPortal
      newPortal = PSV.getMarker('new-portal')
      newPortal.to_sphere_id = @ui.$toSphereSelect.val()

      PSV.updateMarker(newPortal)

  savePortalClicked: =>
    portal = PSV.getMarker('new-portal')

    $.ajax
      url: '/portals'
      type: 'POST'
      dataType: 'json'
      contentType: 'application/json'
      success: @onSavePortalSuccess
      error: @onSavePortalError
      data: @getPortalParams(portal)

  onSavePortalSuccess: =>
    portal = PSV.getMarker('new-portal')
    PSV.removeMarker('new-portal', false)

    createdPortalAttrs =
      id: "created-portal-#{ ++@createdPortalCount }"
      polygon_px: portal.polygon_px
      svgStyle:
        fill: "url(#points)"
        stroke: "rgba(255, 50, 50, 0.8)"
        'stroke-width': "2px"

    PSV.addMarker(createdPortalAttrs)
    @ui.$savePortal.prop('disabled', true)
    @isCreatingPortal = false

  onSavePortalError: (jqXHR, textStatus, errorThrown) =>
    alert("Looks like that save didn't work... #{textStatus}: #{errorThrown}")

  onPSVClick: (e) =>
    if @isCreatingPortal
      newPortal = PSV.getMarker('new-portal')
      newPortal.polygon_px = [] unless newPortal.polygon_px[0].length
      newPortal.polygon_px.push [e.texture_x, e.texture_y]

      PSV.updateMarker(newPortal, true)

      if newPortal.polygon_px.length > 2
        @ui.$savePortal.prop('disabled', false)

    console.log("x, y: "+ e.texture_x + ", " + e.texture_y)
    console.log("latitude, longitude: "+e.latitude + ", " + e.longitude)


window.MemoryApplication = MemoryApplication
