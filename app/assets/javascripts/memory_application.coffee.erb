class MemoryApplication
  soundManagerReady: =>
    if memory.defaultSound
      @createSound(memory.defaultSound).play()

  defaultPanoramaSettings:
    loading_img: "<%= image_url('photosphere-logo.gif') %>",
    navbar: [],
    sphere_segments: 64,
    container: 'photosphere',
    anim_speed: '-2rpm',
    default_fov: 20,
    fisheye: true,
    move_speed: 1.8,
    time_anim: false,
    gyroscope: true,
    webgl: true,
    size:
      height: $(window).height()
      width: $(window).width()
    transition:
      duration: 0,
      loader: true,
      blur: false

  defaultSoundManagerSettings:
    preferFlash: false,
    stream: true,

  defaultSoundSettings:
    autoLoad: true,
    autoPlay: false

  constructor: (memory, sphereNum) ->
    window.memory = memory
    window.currentSphere = memory.spheres[sphereNum]

  start: ->
    soundManager.setup(@defaultSoundManagerSettings);
    soundManager.onready(@soundManagerReady)

    window.PSV = new PhotoSphereViewer($.extend
        panorama: window.currentSphere.panorama,
        caption: window.currentSphere.caption,
        markers: @getPortalsAndMarkers(currentSphere)
      , @defaultPanoramaSettings
    )
    @bindHandlers()

  bindHandlers: ->
    window.PSV.on 'click', (e) ->
      console.log("x, y: "+ e.texture_x + ", " + e.texture_y)
      console.log("latitude, longitude: "+e.latitude + ", " + e.longitude)

    window.PSV.on 'ready', ->
      $('.psv-navbar').hide();

    window.PSV.on 'select-marker', (marker) =>
      @doTransition(marker) if marker.isPolygon()

  doTransition: (marker) ->
    center = @getCenter(marker.polygon_px)

    portal = _.findWhere(window.currentSphere.portals, { id: marker.id })
    associatedSphere = _.findWhere(window.memory.spheres, { id: portal.to_sphere_id })

    window.PSV.animate({
      x: center[0],
      y: center[1]
    }, 1000).then(=> @setNextSphere(associatedSphere, portal))

  setNextSphere: (sphere, portal) ->
    window.PSV.setPanorama(sphere.panorama, {
      latitude: portal.fov_lat,
      longitude: portal.fov_lng
    }, true).then(=> @_setNextSphereMakers(sphere))

  _setNextSphereMakers: (sphere) ->
    PSV.zoom(sphere.defaultZoom)
    PSV.clearMarkers();
    markers = @getPortalsAndMarkers(sphere);
    PSV.addMarker(marker) for marker in markers
    @playSound(sphere)
    window.currentSphere = sphere;

  getPortalsAndMarkers: (sphere) ->
    sphere.markers.concat sphere.portals

  playSound: (sphere) ->
    if sphere.sound
      soundManager.mute(memory.defaultSound.id) if memory.defaultSound
      if soundManager.getSoundById(sphere.sound.id)
        soundManager.play(sphere.sound.id).unmute()
      else
        @createSound(sphere.sound).play()

    else
      soundManager.pauseAll();
      soundManager.play(memory.defaultSound.id).unmute() if memory.defaultSound

  getCenter: (array) ->
    x = array.map (a) -> a[0]
    y = array.map (a) -> a[1]
    minX = Math.min.apply(null, x)
    maxX = Math.max.apply(null, x)
    minY = Math.min.apply(null, y)
    maxY = Math.max.apply(null, y)
    [(minX + maxX)/2, (minY + maxY)/2]

  createSound: (soundConfig) ->
    soundManager.createSound(_.extend({}, @defaultSoundSettings, soundConfig))

window.MemoryApplication = MemoryApplication
